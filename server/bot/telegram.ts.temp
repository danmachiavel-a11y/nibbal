import { Telegraf, Context } from "telegraf";
import { Update, Message, PhotoSize, CallbackQuery } from 'telegraf/types';
import { storage } from "../storage";
import { BridgeManager } from "./bridge";
import { log } from "../vite";
import * as nodeFetch from 'node-fetch';
const fetch = (nodeFetch.default || nodeFetch) as typeof nodeFetch.default;

// Fix Context type
interface TelegramContext extends Context<Update> {
  from: {
    id: number;
    username?: string;
    first_name?: string;
    last_name?: string;
  };
  message?: Message.TextMessage | Message.PhotoMessage;
  callbackQuery?: {
    data: string;
    message: Message;
    id: string;
    from: {
      id: number;
      username?: string;
      first_name?: string;
      last_name?: string;
    };
  };
  reply: (text: string, extra?: any) => Promise<Message>;
  editMessageText: (text: string, extra?: any) => Promise<true | Message>;
  answerCbQuery: (text?: string) => Promise<true>;
};

// Extend existing types
interface TelegramUser {
  id: number;
  username?: string;
  first_name?: string;
  last_name?: string;
}

// Helper types for Telegram messages
interface BaseTelegramMessage {
  message_id: number;
  from?: TelegramUser;
  chat: {
    id: number;
    type: string;
  };
  date: number;
}

interface TextTelegramMessage extends BaseTelegramMessage {
  text: string;
}

interface PhotoTelegramMessage extends BaseTelegramMessage {
  photo: Array<{
    file_id: string;
    file_size?: number;
    width: number;
    height: number;
  }>;
  caption?: string;
}

type TelegramMessage = TextTelegramMessage | PhotoTelegramMessage;

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  chat_instance: string;
  data?: string;
}

interface TelegramCategory {
  id: number;
  name: string;
  isSubmenu?: boolean;
  parentId?: number;
  isClosed?: boolean;
  newRow?: boolean;
  serviceSummary?: string;
  serviceImageUrl?: string;
  questions?: string[];
  transcriptCategoryId?: number;
}

interface CommandCooldown {
  lastUsed: number;
  count: number;
}

interface UserState {
  categoryId: number;
  currentQuestion: number;
  answers: string[];
  inQuestionnaire: boolean;
}

interface MessageRateLimit {
  messages: number;
  windowStart: number;
  blockedUntil?: number;
}

interface StateCleanup {
  timeout: NodeJS.Timeout;
  createdAt: number;
}

function escapeMarkdown(text: string): string {
  if (!text) return '';

  // First, preserve existing markdown formatting
  const preserveFormatting = [
    { pattern: /\*\*(.*?)\*\*/g, placeholder: '§§BOLD§§' },
    { pattern: /\*(.*?)\*/g, placeholder: '§§ITALIC§§' },
    { pattern: /`(.*?)`/g, placeholder: '§§CODE§§' },
    { pattern: /\[(.*?)\]\((.*?)\)/g, placeholder: '§§LINK§§' }
  ];

  let processedText = text;
  const savedFormats: { placeholder: string, original: string }[] = [];

  // Save formatted parts
  preserveFormatting.forEach(({ pattern, placeholder }) => {
    processedText = processedText.replace(pattern, (match) => {
      savedFormats.push({ placeholder: `${placeholder}${savedFormats.length}`, original: match });
      return `${placeholder}${savedFormats.length - 1}`;
    });
  });

  // Escape special characters
  const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
  specialChars.forEach(char => {
    processedText = processedText.replace(new RegExp('\\' + char, 'g'), '\\' + char);
  });

  // Restore formatted parts
  savedFormats.reverse().forEach(({ placeholder, original }) => {
    processedText = processedText.replace(placeholder, original);
  });

  return processedText;
}

export class TelegramBot {
  private bot: Telegraf | null = null;
  private bridge: BridgeManager;
  private userStates: Map<number, UserState> = new Map();
  private stateCleanups: Map<number, StateCleanup> = new Map();
  private _isConnected: boolean = false;
  private isStarting: boolean = false;
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private reconnectAttempts: number = 0;
  private readonly MAX_RECONNECT_ATTEMPTS = 3;
  private readonly CLEANUP_DELAY = 10000; // 10 seconds
  private readonly HEARTBEAT_INTERVAL = 120000; // 2 minutes
  private readonly STATE_TIMEOUT = 900000; // 15 minutes
  private readonly RECONNECT_COOLDOWN = 30000; // 30 seconds
  private readonly MAX_FAILED_HEARTBEATS = 3;
  private failedHeartbeats = 0;

  // Rate limiting and cooldown functionality
  private commandCooldowns: Map<number, Map<string, CommandCooldown>> = new Map();
  private readonly COOLDOWN_WINDOW = 60000;
  private readonly MAX_COMMANDS = 5;
  private messageRateLimits: Map<number, MessageRateLimit> = new Map();
  private readonly MESSAGE_WINDOW = 2000;
  private readonly MAX_MESSAGES = 10;
  private readonly SPAM_BLOCK_DURATION = 300000;
  private readonly MAX_CONCURRENT_USERS = 500;
  private activeUsers: Set<number> = new Set();

  constructor(bridge: BridgeManager) {
    try {
      if (!process.env.TELEGRAM_BOT_TOKEN?.trim()) {
        throw new Error("Invalid Telegram bot token");
      }

      this.bridge = bridge;

      // Start cleanup interval for stale states
      setInterval(() => this.cleanupStaleStates(), 60000);

      log("Telegram bot instance created successfully");
    } catch (error) {
      log(`Error creating Telegram bot: ${error}`, "error");
      throw error;
    }
  }

  private cleanupStaleStates() {
    const now = Date.now();
    Array.from(this.stateCleanups.entries()).forEach(([userId, cleanup]) => {
      if (now - cleanup.createdAt > this.STATE_TIMEOUT) {
        this.userStates.delete(userId);
        this.stateCleanups.delete(userId);
        this.activeUsers.delete(userId);
        log(`Cleaned up stale state for user ${userId}`);
      }
    });
  }

  private setState(userId: number, state: UserState) {
    // Clear existing timeout if any
    const existing = this.stateCleanups.get(userId);
    if (existing?.timeout) {
      clearTimeout(existing.timeout);
    }

    // Set new state with timeout
    this.userStates.set(userId, state);
    const timeout = setTimeout(() => {
      this.userStates.delete(userId);
      this.stateCleanups.delete(userId);
      this.activeUsers.delete(userId);
      log(`State timeout for user ${userId}`);
    }, this.STATE_TIMEOUT);

    this.stateCleanups.set(userId, {
      timeout,
      createdAt: Date.now()
    });
  }

  private stopHeartbeat = (): void => {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  };

  private startHeartbeat = (): void => {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
    }

    this.heartbeatInterval = setInterval(
      () => this.handleHeartbeat(),
      this.HEARTBEAT_INTERVAL
    );
  };

  private async handleHeartbeat() {
    try {
      if (!this._isConnected || this.isStarting) return;

      if (!this.bot) {
        this.failedHeartbeats++;
        log('Bot instance not found during heartbeat', 'warn');
        return;
      }

      const me = await this.bot.telegram.getMe();
      if (!me) {
        this.failedHeartbeats++;
        log(`Heartbeat check failed (attempt ${this.failedHeartbeats}/${this.MAX_FAILED_HEARTBEATS}): Bot returned null`, "warn");

        // Only disconnect after multiple consecutive failures
        if (this.failedHeartbeats >= this.MAX_FAILED_HEARTBEATS) {
          this._isConnected = false;
          await this.handleDisconnect();
        }
        return;
      }

      // Reset failed heartbeats counter on successful check
      this.failedHeartbeats = 0;
    } catch (error) {
      if (error instanceof Error) {
        const errorMessage = error.message;
        log(`Heartbeat check failed: ${errorMessage}`, "warn");
        this.failedHeartbeats++;

        // Only disconnect on critical errors or after multiple failures
        if ((errorMessage.includes('restart') || errorMessage.includes('unauthorized')) ||
          this.failedHeartbeats >= this.MAX_FAILED_HEARTBEATS) {
          this._isConnected = false;
          await this.handleDisconnect();
        }
      } else {
        log(`Unknown error during heartbeat: ${error}`, "error");
        this.failedHeartbeats++;
      }
    }
  }

  async start() {
    if (this.isStarting) {
      log("Bot is already starting, waiting...");
      return;
    }

    this.isStarting = true;

    try {
      log("Starting Telegram bot...");

      // Stop existing bot if any
      if (this.bot) {
        await this.stop();
        await new Promise(resolve => setTimeout(resolve, this.CLEANUP_DELAY));
      }

      this._isConnected = false;
      this.stopHeartbeat();
      this.failedHeartbeats = 0;

      // Create new bot instance
      log("Creating new Telegram bot instance");
      this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

      // Add handlers
      await this.setupHandlers();

      // Add delay before launching
      await new Promise(resolve => setTimeout(resolve, 5000));

      // Launch with conservative options
      await this.bot.launch({
        dropPendingUpdates: true,
        allowedUpdates: ["message", "callback_query"]
      });

      const botInfo = await this.bot.telegram.getMe();
      log(`Connected as @${botInfo.username}`);

      this._isConnected = true;
      this.startHeartbeat();
      this.reconnectAttempts = 0;

      log("Telegram bot started successfully");
    } catch (error) {
      log(`Error starting Telegram bot: ${error}`, "error");
      this._isConnected = false;
      this.failedHeartbeats = 0;

      if (error instanceof Error && error.message.includes("409: Conflict")) {
        log("409 Conflict detected - another bot instance is already running", "error");
        await this.stop();
        await new Promise(resolve => setTimeout(resolve, this.CLEANUP_DELAY * 2));
      }

      throw error;
    } finally {
      this.isStarting = false;
    }
  }

  async stop() {
    try {
      log("Stopping Telegram bot...");
      this.stopHeartbeat();

      if (this.bot) {
        try {
          await this.bot.stop();
        } catch (error) {
          log(`Error during bot stop: ${error}`, "warn");
        } finally {
          this.bot = null;
        }
      }

      this._isConnected = false;
      this.isStarting = false;
      this.userStates.clear();
      this.stateCleanups.clear();
      this.reconnectAttempts = 0;
      this.commandCooldowns.clear();
      this.messageRateLimits.clear();
      this.activeUsers.clear();
      this.failedHeartbeats = 0;

      log("Telegram bot stopped successfully");
    } catch (error) {
      log(`Error stopping Telegram bot: ${error}`, "error");
      throw error;
    }
  }

  getIsConnected(): boolean {
    return this._isConnected && this.bot !== null;
  }

  private async handleDisconnect() {
    if (this.isStarting) return;

    log("Bot disconnected, attempting to reconnect...");
    await new Promise(resolve => setTimeout(resolve, this.RECONNECT_COOLDOWN));

    try {
      if (this.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {
        log("Max reconnection attempts reached, waiting for longer cooldown", "warn");
        this.reconnectAttempts = 0;
        await new Promise(resolve => setTimeout(resolve, this.RECONNECT_COOLDOWN * 2));
      }

      log(`Attempting to reconnect (attempt ${this.reconnectAttempts + 1}/${this.MAX_RECONNECT_ATTEMPTS})...`);

      // Stop existing bot instance gracefully
      if (this.bot) {
        try {
          await this.bot.stop();
        } catch (error) {
          log(`Error stopping bot during reconnect: ${error}`, "warn");
        }
      }

      await this.start();
      this.reconnectAttempts = 0;
      log("Reconnection successful");
    } catch (error) {
      this.reconnectAttempts++;
      log(`Reconnection attempt failed: ${error}`, "error");

      if (this.reconnectAttempts < this.MAX_RECONNECT_ATTEMPTS) {
        await this.handleDisconnect();
      } else {
        log("Max reconnection attempts reached", "error");
        this.reconnectAttempts = 0;
      }
    }
  }

  async sendMessage(chatId: number, text: string) {
    try {
      if (!this.bot) {
        throw new Error("Bot not initialized");
      }

      await this.bot.telegram.sendMessage(chatId, escapeMarkdown(text), {
        parse_mode: "MarkdownV2"
      });
    } catch (error) {
      log(`Error sending message: ${error}`, "error");
      throw error;
    }
  }

  async sendPhoto(chatId: number, photo: Buffer | string, caption?: string): Promise<string | undefined> {
    try {
      if (!this.bot) {
        throw new Error("Bot not initialized");
      }

      log(`Sending photo to chat ${chatId}`);
      let sentMessage;

      // If photo is a URL, download it first
      if (typeof photo === 'string' && photo.startsWith('http')) {
        const response = await fetch(photo);
        const buffer = await response.buffer();
        sentMessage = await this.bot.telegram.sendPhoto(chatId, { source: buffer }, {
          caption: caption ? escapeMarkdown(caption) : undefined,
          parse_mode: "MarkdownV2"
        });
      } else if (photo instanceof Buffer) {
        // Handle buffer by using InputFile format
        sentMessage = await this.bot.telegram.sendPhoto(chatId, { source: photo }, {
          caption: caption ? escapeMarkdown(caption) : undefined,
          parse_mode: "MarkdownV2"
        });
      } else {
        // Handle file_id string
        sentMessage = await this.bot.telegram.sendPhoto(chatId, photo, {
          caption: caption ? escapeMarkdown(caption) : undefined,
          parse_mode: "MarkdownV2"
        });
      }

      // Return the file_id for caching
      if (sentMessage?.photo && sentMessage.photo.length > 0) {
        const fileId = sentMessage.photo[sentMessage.photo.length - 1].file_id;
        log(`Got file_id ${fileId} for photo`);
        return fileId;
      }

      log(`Successfully sent photo to chat ${chatId}`);
      return undefined;
    } catch (error) {
      log(`Error sending photo: ${error}`, "error");
      throw error;
    }
  }

  async sendCachedPhoto(chatId: number, fileId: string, caption?: string): Promise<void> {
    try {
      if (!this.bot) {
        throw new Error("Bot not initialized");
      }

      await this.bot.telegram.sendPhoto(chatId, fileId, {
        caption: caption ? escapeMarkdown(caption) : undefined,
        parse_mode: "MarkdownV2"
      });

      log(`Successfully sent cached photo (${fileId}) to chat ${chatId}`);
    } catch (error) {
      log(`Error sending cached photo: ${error}`, "error");
      throw error;
    }
  }

  private async checkActiveUsers(userId: number): Promise<boolean> {
    // Clean up disconnected users first
    await Promise.all(Array.from(this.activeUsers).map(async (activeId) => {
      try {
        if (this.bot) {
          await this.bot.telegram.getChat(activeId);
        }
      } catch (error) {
        this.activeUsers.delete(activeId);
        this.userStates.delete(activeId);
        this.stateCleanups.delete(activeId);
        log(`Removed inactive user ${activeId}`);
      }
    }));

    // Check if we can add new user
    if (!this.activeUsers.has(userId)) {
      if (this.activeUsers.size >= this.MAX_CONCURRENT_USERS) {
        return false;
      }
      this.activeUsers.add(userId);
    }
    return true;
  }

  private async handleTicketMessage(ctx: TelegramContext) {
    const message = ctx.message as TelegramMessage | undefined;
    if (!message || !('text' in message)) return;

    const userId = ctx.from?.id;
    if (!userId) return;

    try {
      // Check for active ticket 
      const user = await storage.getUserByTelegramId(userId.toString());
      if (!user) {
        await ctx.reply("You haven't created any tickets yet.");
        return;
      }

      const activeTicket = await storage.getActiveTicketByUserId(user.id);
      if (!activeTicket) {
        await ctx.reply("You don't have any active tickets.");
        return;
      }

      const category = await storage.getCategory(activeTicket.categoryId);
      await ctx.reply(
        `Your active ticket:\n\n` +
        `Category: *${category?.name || "Unknown"}*\n` +
        `Status: *${activeTicket.status}*\n` +
        `Created: *${new Date(activeTicket.createdAt || Date.now()).toLocaleString()}*`,
        { parse_mode: "Markdown" }
      );
    } catch (error) {
      log(`Error sending message: ${error}`, "error");
      await ctx.reply("❌ There was an error processing your message. Please try again.");
    }
  }

  private checkCommandCooldown(userId: number, command: string): boolean {
    const now = Date.now();
    let userCooldowns = this.commandCooldowns.get(userId);
    
    if (!userCooldowns) {
      userCooldowns = new Map();
      this.commandCooldowns.set(userId, userCooldowns);
    }

    const cooldown = userCooldowns.get(command);
    if (!cooldown) {
      userCooldowns.set(command, { lastUsed: now, count: 1 });
      return true;
    }

    if (now - cooldown.lastUsed > this.COOLDOWN_WINDOW) {
      userCooldowns.set(command, { lastUsed: now, count: 1 });
      return true;
    }

    if (cooldown.count >= this.MAX_COMMANDS) {
      return false;
    }

    cooldown.count++;
    cooldown.lastUsed = now;
    return true;
  }

  private checkMessageRateLimit(userId: number): boolean {
    const now = Date.now();
    const rateLimit = this.messageRateLimits.get(userId);

    if (!rateLimit) {
      this.messageRateLimits.set(userId, {
        messages: 1,
        windowStart: now
      });
      return true;
    }

    if (rateLimit.blockedUntil && now < rateLimit.blockedUntil) {
      return false;
    }

    if (now - rateLimit.windowStart > this.MESSAGE_WINDOW) {
      this.messageRateLimits.set(userId, {
        messages: 1,
        windowStart: now
      });
      return true;
    }

    if (rateLimit.messages >= this.MAX_MESSAGES) {
      this.messageRateLimits.set(userId, {
        ...rateLimit,
        blockedUntil: now + this.SPAM_BLOCK_DURATION
      });
      return false;
    }

    rateLimit.messages++;
    return true;
  }
}

export { TelegramBot };