import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { useForm } from "react-hook-form";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import type { Category } from "@shared/schema";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { useState, useEffect } from 'react';
import { Folder, FolderOpen, Tag, Info, Trash2, Check, X, Plus } from 'lucide-react';
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";
import { CategoryEditor } from "@/components/CategoryEditor";

function CategoryList({ categories }: { categories: Category[] }) {
  const submenus = categories.filter(cat => cat.isSubmenu);
  const rootCategories = categories.filter(cat => !cat.parentId && !cat.isSubmenu);
  const [expandedItems, setExpandedItems] = useState<string[]>([]);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const handleDeleteCategory = async (id: number) => {
    try {
      const res = await fetch(`/api/categories/${id}`, {
        method: 'DELETE',
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(`Failed to delete category: ${errorData.message || res.statusText}`);
      }

      toast({
        title: "Success",
        description: "Category deleted successfully",
      });

      queryClient.invalidateQueries({ queryKey: ["/api/categories"] });
    } catch (error: any) {
      toast({
        title: "Error",
        description: `Failed to delete category: ${error.message}`,
        variant: "destructive"
      });
    }
  };

  const toggleAccordion = (value: string) => {
    setExpandedItems(current =>
      current.includes(value)
        ? current.filter(item => item !== value)
        : [...current, value]
    );
  };

  const DeleteButton = ({ category, message }: { category: Category, message: string }) => (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <span 
          onClick={(e) => e.stopPropagation()} 
          className="px-3 py-1.5 rounded-md bg-red-50 border border-red-200 text-red-600 font-medium text-sm flex items-center gap-1.5 hover:bg-red-100 hover:border-red-300 transition-colors ml-4 cursor-pointer"
        >
          <Trash2 className="h-3.5 w-3.5" />
          <span>Delete</span>
        </span>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Delete {category.isSubmenu ? "Submenu" : "Category"}</AlertDialogTitle>
          <AlertDialogDescription>
            {message}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={() => handleDeleteCategory(category.id)}
            className="bg-red-600 hover:bg-red-700 text-white"
          >
            Delete
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );

  return (
    <div className="space-y-6">
      {/* Root Categories Section */}
      <div>
        <div className="flex items-center gap-2 mb-4">
          <Tag className="h-5 w-5" />
          <h3 className="text-lg font-semibold">Root Categories</h3>
          <span className="text-sm text-muted-foreground">
            ({rootCategories.length})
          </span>
        </div>
        <Accordion
          type="multiple"
          value={expandedItems}
          onValueChange={setExpandedItems}
          className="w-full space-y-2"
        >
          {rootCategories.map(category => (
            <AccordionItem
              key={category.id}
              value={category.id.toString()}
              className="border rounded-lg shadow-sm bg-card"
            >
              <AccordionTrigger className="px-4 hover:no-underline">
                <div className="flex items-center justify-between w-full">
                  <div className="flex items-center gap-3">
                    <Tag className="h-4 w-4 text-muted-foreground" />
                    <span>{category.name}</span>
                  </div>
                  <div className="flex items-center gap-4">
                    <DeleteButton
                      category={category}
                      message={`Are you sure you want to delete "${category.name}"? This action cannot be undone.`}
                    />
                  </div>
                </div>
              </AccordionTrigger>
              <AccordionContent className="px-4 pb-3">
                <div className="border-l-2 pl-4 ml-2 border-muted">
                  <CategoryEditor category={category} categories={categories} />
                </div>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>

      {/* Submenus Section */}
      <div>
        <div className="flex items-center gap-2 mb-4">
          <Folder className="h-5 w-5" />
          <h3 className="text-lg font-semibold">Submenus</h3>
          <span className="text-sm text-muted-foreground">
            ({submenus.length})
          </span>
        </div>
        <Accordion
          type="multiple"
          value={expandedItems}
          onValueChange={setExpandedItems}
          className="w-full space-y-2"
        >
          {submenus.map(submenu => (
            <AccordionItem
              key={submenu.id}
              value={submenu.id.toString()}
              className="border rounded-lg shadow-sm bg-card"
            >
              <AccordionTrigger className="px-4 hover:no-underline">
                <div className="flex items-center justify-between w-full">
                  <div className="flex items-center gap-3">
                    {expandedItems.includes(submenu.id.toString())
                      ? <FolderOpen className="h-4 w-4 text-muted-foreground" />
                      : <Folder className="h-4 w-4 text-muted-foreground" />
                    }
                    <span>{submenu.name}</span>
                    <span className="text-sm text-muted-foreground ml-2">
                      ({categories.filter(cat => cat.parentId === submenu.id).length} categories)
                    </span>
                  </div>
                  <div className="flex items-center gap-4">
                    <DeleteButton
                      category={submenu}
                      message={`Are you sure you want to delete "${submenu.name}"? This will also delete all categories within this submenu. This action cannot be undone.`}
                    />
                  </div>
                </div>
              </AccordionTrigger>
              <AccordionContent className="border-l-2 ml-6 pl-4">
                <CategoryEditor category={submenu} categories={categories} />

                <div className="mt-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Tag className="h-4 w-4" />
                    <h4 className="text-sm font-medium">Categories</h4>
                  </div>
                  <Accordion
                    type="multiple"
                    value={expandedItems}
                    onValueChange={setExpandedItems}
                    className="w-full space-y-2"
                  >
                    {categories
                      .filter(cat => cat.parentId === submenu.id)
                      .map(category => (
                        <AccordionItem
                          key={category.id}
                          value={`${category.id}-child`}
                          className="border rounded-lg shadow-sm bg-card"
                        >
                          <AccordionTrigger className="px-4 hover:no-underline">
                            <div className="flex items-center justify-between w-full">
                              <div className="flex items-center gap-3">
                                <Tag className="h-4 w-4 text-muted-foreground" />
                                <span>{category.name}</span>
                              </div>
                              <div className="flex items-center gap-4">
                                <DeleteButton
                                  category={category}
                                  message={`Are you sure you want to delete "${category.name}"? This action cannot be undone.`}
                                />
                              </div>
                            </div>
                          </AccordionTrigger>
                          <AccordionContent className="px-4 pb-3">
                            <CategoryEditor category={category} categories={categories} />
                          </AccordionContent>
                        </AccordionItem>
                      ))}
                  </Accordion>
                </div>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
}

async function refreshRoles(form: any, toast: any) {
  try {
    const res = await apiRequest("GET", "/api/discord/roles");
    if (!res.ok) {
      const errorData = await res.json();
      throw new Error(`Failed to fetch Discord roles: ${errorData.message || res.statusText}`);
    }
    const roles = await res.json();
    form.setValue("discordRoles", roles);
  } catch (error: any) {
    toast({
      title: "Error",
      description: `Failed to load Discord roles: ${error.message}`,
      variant: "destructive"
    });
  }
}

async function refreshCategories(form: any, toast: any) {
  try {
    const res = await apiRequest("GET", "/api/discord/categories");
    if (!res.ok) {
      const errorData = await res.json();
      throw new Error(`Failed to fetch Discord categories: ${errorData.message || res.statusText}`);
    }
    const categories = await res.json();
    form.setValue("discordCategories", categories);
  } catch (error: any) {
    toast({
      title: "Error",
      description: `Failed to load Discord categories: ${error.message}`,
      variant: "destructive"
    });
  }
}

function SettingsPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState("existing");

  const { data: categories } = useQuery<Category[]>({
    queryKey: ["/api/categories"]
  });

  const categoryForm = useForm({
    defaultValues: {
      isSubmenu: false,
      name: "",
      parentId: null,
      discordRoleId: "",
      discordCategoryId: "",
      transcriptCategoryId: "",
      questions: "",
      serviceSummary: "",
      serviceImageUrl: "",
      displayOrder: 0,
      newRow: false,
      isClosed: false,
      discordCategories: [],
      discordRoles: []
    }
  });

  const botConfigForm = useForm({
    defaultValues: {
      telegramToken: "",
      discordToken: "",
      welcomeMessage: "",
      welcomeImageUrl: "",
      adminTelegramIds: [],
      adminDiscordIds: []
    }
  });

  useEffect(() => {
    const loadBotConfig = async () => {
      try {
        const res = await apiRequest("GET", "/api/bot-config");
        if (!res.ok) {
          const errorData = await res.json();
          throw new Error(`Failed to fetch bot configuration: ${errorData.message || res.statusText}`);
        }
        const config = await res.json();

        // Set form values with the loaded configuration
        botConfigForm.setValue("telegramToken", config.telegramToken || "");
        botConfigForm.setValue("discordToken", config.discordToken || "");
        botConfigForm.setValue("welcomeMessage", config.welcomeMessage || "");
        botConfigForm.setValue("welcomeImageUrl", config.welcomeImageUrl || "");
        botConfigForm.setValue("adminTelegramIds", config.adminTelegramIds || []);
        botConfigForm.setValue("adminDiscordIds", config.adminDiscordIds || []);
      } catch (error: any) {
        toast({
          title: "Error",
          description: `Failed to load bot configuration: ${error.message}`,
          variant: "destructive"
        });
      }
    };

    if (activeTab === "bot-config") {
      loadBotConfig();
    }

    if (activeTab === "new") {
      Promise.all([
        refreshRoles(categoryForm, toast),
        refreshCategories(categoryForm, toast)
      ]);
    }
  }, [activeTab]);

  const onSubmit = async (data: any) => {
    try {
      // Format questions as an array (one question per line)
      const questions = data.questions
        .split('\n')
        .filter((q: string) => q.trim())
        .map((q: string) => q.trim());

      // Prepare the data for API
      const submitData = {
        name: data.name,
        isSubmenu: data.isSubmenu,
        parentId: data.parentId,
        discordRoleId: data.discordRoleId,
        discordCategoryId: data.discordCategoryId,
        transcriptCategoryId: data.transcriptCategoryId,
        questions,
        serviceSummary: data.serviceSummary,
        serviceImageUrl: data.serviceImageUrl,
        displayOrder: data.displayOrder,
        newRow: data.newRow,
        isClosed: data.isClosed,
      };

      // Send the data to API
      const res = await apiRequest("POST", "/api/categories", submitData);
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(`Failed to create category: ${errorData.message || res.statusText}`);
      }

      // Notify user of success
      toast({
        title: "Success",
        description: `Created ${data.isSubmenu ? "submenu" : "category"}: ${data.name}`,
      });

      // Reset form to default values
      categoryForm.reset();

      // Refresh categories list
      queryClient.invalidateQueries({ queryKey: ["/api/categories"] });

      // Switch to existing categories tab
      setActiveTab("existing");
    } catch (error: any) {
      toast({
        title: "Error",
        description: `Failed to create category: ${error.message}`,
        variant: "destructive"
      });
    }
  };

  const onBotConfigSubmit = async (data: any) => {
    try {
      // Prepare the data for API
      const submitData = {
        telegramToken: data.telegramToken,
        discordToken: data.discordToken,
        welcomeMessage: data.welcomeMessage,
        welcomeImageUrl: data.welcomeImageUrl,
        adminTelegramIds: data.adminTelegramIds,
        adminDiscordIds: data.adminDiscordIds,
      };

      // Send the data to API
      const res = await apiRequest("PATCH", "/api/bot-config", submitData);
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(`Failed to update bot configuration: ${errorData.message || res.statusText}`);
      }

      // Notify user of success
      toast({
        title: "Success",
        description: "Bot configuration updated successfully",
      });
    } catch (error: any) {
      toast({
        title: "Error",
        description: `Failed to update bot configuration: ${error.message}`,
        variant: "destructive"
      });
    }
  };

  return (
    <div className="container max-w-6xl py-6">
      <h1 className="text-3xl font-bold mb-6">Settings</h1>
      
      <Card className="border shadow-sm">
        <CardContent className="p-6">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="mb-6 grid w-full grid-cols-3">
              <TabsTrigger value="existing">
                <div className="flex items-center gap-2">
                  <Tag className="h-4 w-4" />
                  <span>Existing Categories</span>
                </div>
              </TabsTrigger>
              <TabsTrigger value="new">
                <div className="flex items-center gap-2">
                  <Tag className="h-4 w-4" />
                  <span>Create New</span>
                </div>
              </TabsTrigger>
              <TabsTrigger value="bot-config">
                <div className="flex items-center gap-2">
                  <Info className="h-4 w-4" />
                  <span>Bot Configuration</span>
                </div>
              </TabsTrigger>
            </TabsList>

            <TabsContent value="existing">
              <div className="mt-4">
                <h2 className="text-xl font-semibold mb-4">Category Management</h2>
                {categories ? (
                  <CategoryList categories={categories} />
                ) : (
                  <div className="py-8 text-center flex flex-col items-center gap-4">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    <p className="text-muted-foreground">Loading categories...</p>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="new">
              <Card>
                <CardHeader>
                  <CardTitle>Create New Menu Item</CardTitle>
                </CardHeader>
                <CardContent>
                  <Form {...categoryForm}>
                    <form onSubmit={categoryForm.handleSubmit(onSubmit)} className="space-y-4">
                      <FormField
                        control={categoryForm.control}
                        name="isSubmenu"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Type</FormLabel>
                            <FormDescription>
                              Choose whether this is a submenu (like "Food") or a category (like "Grubhub")
                            </FormDescription>
                            <FormControl>
                              <Tabs
                                value={field.value ? "submenu" : "category"}
                                onValueChange={(value) => field.onChange(value === "submenu")}
                                className="w-full"
                              >
                                <TabsList className="grid w-full grid-cols-2">
                                  <TabsTrigger value="category">Category</TabsTrigger>
                                  <TabsTrigger value="submenu">Submenu</TabsTrigger>
                                </TabsList>
                              </Tabs>
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={categoryForm.control}
                          name="name"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Name</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={categoryForm.control}
                          name="displayOrder"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Display Order</FormLabel>
                              <FormControl>
                                <Input
                                  type="number"
                                  {...field}
                                  onChange={(e) => field.onChange(parseInt(e.target.value))}
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />
                      </div>

                      {/* Display Options Section - Always Visible */}
                      <div className="bg-muted/20 border border-border/30 rounded-md p-4">
                        <h4 className="text-sm font-medium mb-3">Display Options</h4>
                        <div className="flex space-x-4">
                          <FormField
                            control={categoryForm.control}
                            name="newRow"
                            render={({ field }) => (
                              <FormItem className="flex items-center gap-2.5">
                                <FormControl>
                                  <div className="relative flex items-center">
                                    <div className="relative">
                                      <input
                                        type="checkbox"
                                        checked={field.value}
                                        onChange={field.onChange}
                                        id="newRowCheckbox"
                                        className="peer sr-only"
                                      />
                                      <div className="h-5 w-5 rounded border border-gray-300 bg-white peer-checked:bg-primary peer-checked:border-primary transition-colors"></div>
                                      {field.value && (
                                        <Check className="h-3.5 w-3.5 text-white absolute top-[3px] left-[3px]" />
                                      )}
                                    </div>
                                  </div>
                                </FormControl>
                                <FormLabel htmlFor="newRowCheckbox" className="m-0 font-medium cursor-pointer select-none">
                                  Start New Row
                                </FormLabel>
                                <TooltipProvider>
                                  <Tooltip>
                                    <TooltipTrigger className="ml-0.5">
                                      <Info className="h-4 w-4 text-muted-foreground" />
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>Start this button on a new row in the Telegram menu</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={categoryForm.control}
                            name="isClosed"
                            render={({ field }) => (
                              <FormItem className="flex items-center gap-2.5">
                                <FormControl>
                                  <div className="relative flex items-center">
                                    <div className="relative">
                                      <input
                                        type="checkbox"
                                        checked={field.value}
                                        onChange={field.onChange}
                                        id="isClosedCheckbox"
                                        className="peer sr-only"
                                      />
                                      <div className="h-5 w-5 rounded border border-gray-300 bg-white peer-checked:bg-primary peer-checked:border-primary transition-colors"></div>
                                      {field.value && (
                                        <Check className="h-3.5 w-3.5 text-white absolute top-[3px] left-[3px]" />
                                      )}
                                    </div>
                                  </div>
                                </FormControl>
                                <FormLabel htmlFor="isClosedCheckbox" className="m-0 font-medium cursor-pointer select-none">
                                  Service Closed
                                </FormLabel>
                                <TooltipProvider>
                                  <Tooltip>
                                    <TooltipTrigger className="ml-0.5">
                                      <Info className="h-4 w-4 text-muted-foreground" />
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>When closed, users will see a message saying</p>
                                      <p>"This service is currently closed. Try again later."</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              </FormItem>
                            )}
                          />
                        </div>
                      </div>

                      {!categoryForm.watch("isSubmenu") && (
                        <FormField
                          control={categoryForm.control}
                          name="parentId"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Parent Menu</FormLabel>
                              <FormDescription>
                                Choose which submenu this category belongs to
                              </FormDescription>
                              <FormControl>
                                <select
                                  className="flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                  value={field.value || ""}
                                  onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : null)}
                                >
                                  <option value="">Root (No Parent)</option>
                                  {categories
                                    ?.filter(cat => cat.isSubmenu)
                                    .map(submenu => (
                                      <option key={submenu.id} value={submenu.id}>{submenu.name}</option>
                                    ))}
                                </select>
                              </FormControl>
                            </FormItem>
                          )}
                        />
                      )}
                      </div>

                      {!categoryForm.watch("isSubmenu") && (
                        <>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                            <FormField
                              control={categoryForm.control}
                              name="discordRoleId"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Discord Role</FormLabel>
                                  <FormDescription>
                                    Role that will be pinged for new tickets
                                  </FormDescription>
                                  <div className="flex gap-2 items-center">
                                    <FormControl className="flex-1">
                                      <select
                                        className="flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                        value={field.value || ""}
                                        onChange={(e) => field.onChange(e.target.value)}
                                      >
                                        <option value="">Select a role</option>
                                        {categoryForm.getValues("discordRoles")?.map((role: any) => (
                                          <option key={role.id} value={role.id}>{role.name}</option>
                                        ))}
                                      </select>
                                    </FormControl>
                                  </div>
                                </FormItem>
                              )}
                            />

                            <FormField
                              control={categoryForm.control}
                              name="discordCategoryId"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Discord Active Tickets Category</FormLabel>
                                  <FormDescription>
                                    Where new ticket channels are created
                                  </FormDescription>
                                  <FormControl>
                                    <select
                                      className="flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                      value={field.value || ""}
                                      onChange={(e) => field.onChange(e.target.value)}
                                    >
                                      <option value="">Select a category</option>
                                      {categoryForm.getValues("discordCategories")?.map((category: any) => (
                                        <option key={category.id} value={category.id}>{category.name}</option>
                                      ))}
                                    </select>
                                  </FormControl>
                                </FormItem>
                              )}
                            />
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <FormField
                              control={categoryForm.control}
                              name="transcriptCategoryId"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Discord Transcripts Category</FormLabel>
                                  <FormDescription>
                                    Where closed tickets are moved
                                  </FormDescription>
                                  <FormControl>
                                    <select
                                      className="flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                                      value={field.value || ""}
                                      onChange={(e) => field.onChange(e.target.value)}
                                    >
                                      <option value="">Select a category</option>
                                      {categoryForm.getValues("discordCategories")?.map((category: any) => (
                                        <option key={category.id} value={category.id}>{category.name}</option>
                                      ))}
                                    </select>
                                  </FormControl>
                                </FormItem>
                              )}
                            />
                          </div>

                          <FormField
                            control={categoryForm.control}
                            name="serviceSummary"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Service Summary</FormLabel>
                                <FormDescription>
                                  A brief description that will be shown to users. Markdown is supported.
                                </FormDescription>
                                <FormControl>
                                  <Textarea
                                    {...field}
                                    rows={3}
                                    value={field.value || ''}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={categoryForm.control}
                            name="serviceImageUrl"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Service Image URL</FormLabel>
                                <FormDescription>
                                  Optional: URL of an image to show with the service description
                                </FormDescription>
                                <FormControl>
                                  <Input {...field} value={field.value || ''} />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={categoryForm.control}
                            name="questions"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Questions</FormLabel>
                                <FormDescription>
                                  One question per line. These questions will be asked when a user selects this category.
                                </FormDescription>
                                <FormControl>
                                  <Textarea
                                    {...field}
                                    rows={4}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                        </>
                      )}

                      <div className="flex justify-end space-x-2 mt-6">
                        <Button 
                          type="button" 
                          variant="outline" 
                          onClick={() => Promise.all([
                            refreshRoles(categoryForm, toast),
                            refreshCategories(categoryForm, toast)
                          ])}
                        >
                          Refresh Discord Data
                        </Button>
                        <Button type="submit">Create</Button>
                      </div>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="bot-config">
              <Card>
                <CardHeader>
                  <CardTitle>Bot Configuration</CardTitle>
                </CardHeader>
                <CardContent>
                  <Form {...botConfigForm}>
                    <form onSubmit={botConfigForm.handleSubmit(onBotConfigSubmit)} className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={botConfigForm.control}
                          name="telegramToken"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Telegram Bot Token</FormLabel>
                              <FormDescription>
                                The Telegram Bot API token from @BotFather
                              </FormDescription>
                              <FormControl>
                                <Input
                                  {...field}
                                  type="password"
                                  autoComplete="off"
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={botConfigForm.control}
                          name="discordToken"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Discord Bot Token</FormLabel>
                              <FormDescription>
                                The Discord Bot token from Discord Developer Portal
                              </FormDescription>
                              <FormControl>
                                <Input
                                  {...field}
                                  type="password"
                                  autoComplete="off"
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />
                      </div>

                      <FormField
                        control={botConfigForm.control}
                        name="welcomeMessage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Welcome Message</FormLabel>
                            <FormDescription>
                              The message that will be sent when a user first interacts with the bot
                            </FormDescription>
                            <FormControl>
                              <Textarea
                                {...field}
                                rows={5}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={botConfigForm.control}
                        name="welcomeImageUrl"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Welcome Image URL</FormLabel>
                            <FormDescription>
                              Optional: URL of an image to include with the welcome message
                            </FormDescription>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                          </FormItem>
                        )}
                      />

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={botConfigForm.control}
                          name="adminTelegramIds"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Admin Telegram IDs</FormLabel>
                              <FormDescription>
                                Comma-separated list of Telegram user IDs who are admins. These users can run admin-only commands.
                              </FormDescription>
                              <FormControl>
                                <Input
                                  {...field}
                                  value={Array.isArray(field.value) ? field.value.join(',') : field.value}
                                  onChange={(e) => field.onChange(
                                    e.target.value.split(',').map(id => id.trim()).filter(Boolean)
                                  )}
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={botConfigForm.control}
                          name="adminDiscordIds"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Admin Discord IDs</FormLabel>
                              <FormDescription>
                                Comma-separated list of Discord user IDs who are admins. These users can run admin-only commands.
                              </FormDescription>
                              <FormControl>
                                <Input
                                  {...field}
                                  value={Array.isArray(field.value) ? field.value.join(',') : field.value}
                                  onChange={(e) => field.onChange(
                                    e.target.value.split(',').map(id => id.trim()).filter(Boolean)
                                  )}
                                />
                              </FormControl>
                            </FormItem>
                          )}
                        />
                      </div>

                      <div className="flex justify-end pt-4">
                        <Button type="submit">Save Bot Configuration</Button>
                      </div>
                    </form>
                  </Form>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}

export default SettingsPage;